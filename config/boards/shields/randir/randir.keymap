/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */




#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
//#include <dt-bindings/zmk/ext_power.h>



&sk {
     release-after-ms = <2000>;
     quick-release;
 };

/ {

	macros {
		ZMK_MACRO(m_qu,					wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp Q &kp U>;)
		ZMK_MACRO(m_upper_Qu,			wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp LS(Q) &kp U>;)
		ZMK_MACRO(m_elipsis,			wait-ms = <5>;	tap-ms = <5>;		bindings = <&macro_press	&kp LALT>
    																			, <&macro_tap			&kp KP_N0 &kp KP_N1 &kp KP_N3 &kp KP_N3>
    																			, <&macro_release		&kp LALT &kp SPACE>;)
		ZMK_MACRO(m_degree,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&macro_press	&kp LALT>
    																			, <&macro_tap			&kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N6>
    																			, <&macro_release		&kp LALT>;)
		ZMK_MACRO(m_textIndent,			wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp SPACE &kp MINUS &kp SPACE &kp HOME &kp DOWN >;)		

//		RESPONSIVE ARROWS
		//ZMK_MACRO(m_UP,					ait-ms = <5>;	tap-ms = <5>;		bindings = <&macro_press	&kp UP>;)
																				//, <&macro_tap			&kp UP>
    																			//, <&macro_release		&kp UP>;)

//		RANDOM MACROS
		ZMK_MACRO(m_password1,			wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp A &kp B &kp O &kp U &kp T >;)
		ZMK_MACRO(m_password2,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp A &kp B &kp O &kp U &kp T >;)


//		WORD PARTS		
		ZMK_MACRO(m_able,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp A &kp B &kp L &kp E >;)
		ZMK_MACRO(m_about,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp A &kp B &kp O &kp U &kp T >;)
		ZMK_MACRO(m_ack,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp A &kp C &kp K >;)
		ZMK_MACRO(m_aise,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp A &kp I &kp S &kp E >;)
		ZMK_MACRO(m_ake,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp A &kp K &kp E >;)
		ZMK_MACRO(m_al,					wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp A &kp L >;)
		ZMK_MACRO(m_all,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp A &kp L &kp L >;)
		ZMK_MACRO(m_ally,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp A &kp L &kp L &kp Y >;)
		ZMK_MACRO(m_also,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp A &kp L &kp S &kp O >;)
		ZMK_MACRO(m_and,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp A &kp N &kp D >;)
		ZMK_MACRO(m_ange,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp A &kp N &kp G &kp E >;)
		ZMK_MACRO(m_are,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp A &kp R &kp E >;)
		ZMK_MACRO(m_ation,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp A &kp T &kp I &kp O &kp N >;)
		ZMK_MACRO(m_ative,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp A &kp T &kp I &kp V &kp E >;)
		ZMK_MACRO(m_ave,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp A &kp V &kp E >;)
		
		ZMK_MACRO(m_be,					wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp B &kp E >;)
		ZMK_MACRO(m_because,			wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp B &kp E &kp C &kp A &kp U &kp S &kp E >;)
		
		ZMK_MACRO(m_ch,					wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp C &kp H >;)
		
		ZMK_MACRO(m_day,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp D &kp A &kp Y >;)
		ZMK_MACRO(m_dis,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp D &kp I &kp S >;)
	
		ZMK_MACRO(m_each,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp E &kp A &kp C &kp H >;)
		ZMK_MACRO(m_eal,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp E &kp A &kp L >;)
		ZMK_MACRO(m_ear,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp E &kp A &kp R >;)
		ZMK_MACRO(m_een,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp E &kp E &kp N >;)
		ZMK_MACRO(m_eir,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp E &kp I &kp R >;)
		ZMK_MACRO(m_ent,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp E &kp N &kp T >;)
		ZMK_MACRO(m_ere,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp E &kp R &kp E >;)
		ZMK_MACRO(m_ess,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp E &kp S &kp S >;)
		ZMK_MACRO(m_ever,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp E &kp V &kp E &kp R >;)
		ZMK_MACRO(m_every,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp E &kp V &kp E &kp R &kp Y >;)
		
		ZMK_MACRO(m_for,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp F &kp O &kp R >;)
		ZMK_MACRO(m_from,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp F &kp R &kp O &kp M >;)
		
		ZMK_MACRO(m_has,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp H &kp A &kp S >;)
		ZMK_MACRO(m_have,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp H &kp A &kp V &kp E >;)
		
		ZMK_MACRO(m_ible,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp I &kp B &kp L &kp E >;)
		ZMK_MACRO(m_ice,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp I &kp C &kp E >;)
		ZMK_MACRO(m_ich,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp I &kp C &kp H >;)
		ZMK_MACRO(m_ies,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp I &kp E &kp S >;)
		ZMK_MACRO(m_igh,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp I &kp G &kp H >;)
		ZMK_MACRO(m_ight,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp I &kp G &kp H &kp T >;)
		ZMK_MACRO(m_ind,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp I &kp N &kp D >;)
		ZMK_MACRO(m_ine,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp I &kp N &kp E >;)
		ZMK_MACRO(m_ing,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp I &kp N &kp G >;)
		ZMK_MACRO(m_ion,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp I &kp O &kp N >;)
		ZMK_MACRO(m_ious,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp I &kp O &kp U &kp S >;)
		ZMK_MACRO(m_irst,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp I &kp R &kp S &kp T >;)
		ZMK_MACRO(m_ise,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp I &kp S &kp E >;)
		ZMK_MACRO(m_ism,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp I &kp S &kp M >;)
		ZMK_MACRO(m_ist,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp I &kp S &kp T >;)
		ZMK_MACRO(m_ive,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp I &kp V &kp E >;)
		
		ZMK_MACRO(m_ld,					wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp L &kp D >;)
		ZMK_MACRO(m_less,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp L &kp E &kp S &kp S >;)
		ZMK_MACRO(m_lly,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp L &kp L &kp Y >;)
		ZMK_MACRO(m_ly,					wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp L &kp Y >;)
		
		ZMK_MACRO(m_ment,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp M &kp E &kp N &kp T >;)
		
		ZMK_MACRO(m_ness,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp N &kp E &kp S &kp S >;)
		
		ZMK_MACRO(m_obvious,			wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp O &kp B &kp V &kp I &kp O &kp U &kp S >;)
		ZMK_MACRO(m_ock,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp O &kp C &kp K >;)
		ZMK_MACRO(m_oint,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp O &kp I &kp N &kp T >;)
		ZMK_MACRO(m_ome,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp O &kp M &kp E >;)
		ZMK_MACRO(m_one,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp O &kp N &kp E >;)
		ZMK_MACRO(m_ook,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp O &kp O &kp K >;)
		ZMK_MACRO(m_ore,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp O &kp R &kp E >;)
		ZMK_MACRO(m_ose,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp O &kp S &kp E >;)
		ZMK_MACRO(m_other,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp O &kp T &kp H &kp E &kp R >;)
		ZMK_MACRO(m_ough,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp O &kp U &kp G &kp H >;)
		ZMK_MACRO(m_ought,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp O &kp U &kp G &kp H &kp T >;)
		ZMK_MACRO(m_ould,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp O &kp U &kp L &kp D >;)
		ZMK_MACRO(m_our,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp O &kp U &kp R >;)
		ZMK_MACRO(m_ous,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp O &kp U &kp S >;)
		ZMK_MACRO(m_ouse,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp O &kp U &kp S &kp E >;)
		ZMK_MACRO(m_out,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp O &kp U &kp T >;)
		
		ZMK_MACRO(m_pra,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp P &kp R &kp A >;)
		ZMK_MACRO(m_pre,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp P &kp R &kp E >;)
		ZMK_MACRO(m_pro,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp P &kp R &kp O >;)
		ZMK_MACRO(m_psy,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp P &kp S &kp Y >;)
		ZMK_MACRO(m_psych,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp P &kp S &kp Y &kp C &kp H >;)
		
		ZMK_MACRO(m_rst,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp R &kp S &kp T >;)
		
		ZMK_MACRO(m_sh,					wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp S &kp H >;)
		ZMK_MACRO(m_sm,					wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp S &kp M >;)
		
		ZMK_MACRO(m_than,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp T &kp H &kp A &kp N >;)
		ZMK_MACRO(m_that,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp T &kp H &kp A &kp T >;)
		ZMK_MACRO(m_then,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp T &kp H &kp E &kp N >;)
		ZMK_MACRO(m_there,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp T &kp H &kp E &kp R &kp E >;)
		ZMK_MACRO(m_these,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp T &kp H &kp E &kp S &kp E >;)
		ZMK_MACRO(m_thin,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp T &kp H &kp I &kp N >;)
		ZMK_MACRO(m_this,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp T &kp H &kp I &kp S >;)
		ZMK_MACRO(m_thr,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp T &kp H &kp R >;)
		ZMK_MACRO(m_tion,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp T &kp I &kp O &kp N >;)
		ZMK_MACRO(m_tive,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp T &kp I &kp V &kp E >;)
		ZMK_MACRO(m_ttle,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp T &kp T &kp L &kp E >;)
		
		ZMK_MACRO(m_uch,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp U &kp C &kp H >;)
		ZMK_MACRO(m_uous,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp U &kp O &kp U &kp S >;)
		
		ZMK_MACRO(m_was,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp W &kp A &kp S >;)
		ZMK_MACRO(m_we,					wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp W &kp E >;)
		ZMK_MACRO(m_wh,					wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp W &kp H >;)
		ZMK_MACRO(m_what,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp W &kp H &kp A &kp T >;)
		ZMK_MACRO(m_when,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp W &kp H &kp E &kp N >;)
		ZMK_MACRO(m_with,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp W &kp I &kp T &kp H >;)
		ZMK_MACRO(m_your,				wait-ms = <5>;	tap-ms = <5>;		bindings = <&kp Y &kp O &kp U &kp R >;)

	};

	combos {
		compatible = "zmk,combos";
		
//
//	Key Position Map						
//	┌────┬────┬────┬────┐
//	| 0  | 1  | 2  | 3  |
//	├────┼────┼────┼────┤
//	| 4  | 5  | 6  | 7  |
//	└────┴────┴────┴────┼────┬────┐
//						| 8  | 9  |
//			    		└────┴────┘
//					┌────┐
//					| 10 | 
//		       ┌────┼────┼────┐
//		       | 11 | 12 | 13 |
//		       └────┴────┴────┘
//			    	| 14 | 
//			    	└────┘
// 
//		LOWERCASE LETTERS
		combo_b				{timeout-ms = <500>;	key-positions = <0 1>;			bindings = <&kp B >;};
		combo_c				{timeout-ms = <500>;	key-positions = <5 7>;			bindings = <&kp C >;};
		combo_d				{timeout-ms = <500>;	key-positions = <4 7>;			bindings = <&kp D >;};
		combo_f				{timeout-ms = <500>;	key-positions = <1 3>;			bindings = <&kp F >;};
		combo_g				{timeout-ms = <500>;	key-positions = <0 3>;			bindings = <&kp G >;};
		combo_h				{timeout-ms = <500>;	key-positions = <6 7>;			bindings = <&kp H >;};
		combo_j				{timeout-ms = <500>;	key-positions = <2 4>;			bindings = <&kp J >;};
		combo_k				{timeout-ms = <500>;	key-positions = <3 5>;			bindings = <&kp K >;};
		combo_l				{timeout-ms = <500>;	key-positions = <4 5>;			bindings = <&kp L >;};
		combo_m				{timeout-ms = <500>;	key-positions = <0 7>;			bindings = <&kp M >;};
		combo_p				{timeout-ms = <500>;	key-positions = <1 2>;			bindings = <&kp P >;};
		combo_qu			{timeout-ms = <500>;	key-positions = <4 6>;			bindings = <&m_qu >;};				//	Macro
		combo_u				{timeout-ms = <500>;	key-positions = <5 6>;			bindings = <&kp U >;};
		combo_v				{timeout-ms = <500>;	key-positions = <1 7>;			bindings = <&kp V >;};
		combo_w				{timeout-ms = <500>;	key-positions = <3 4>;			bindings = <&kp W >;};
		combo_x				{timeout-ms = <500>;	key-positions = <0 6>;			bindings = <&kp X >;};
		combo_y				{timeout-ms = <500>;	key-positions = <2 3>;			bindings = <&kp Y >;};
		combo_z				{timeout-ms = <500>;	key-positions = <0 2>;			bindings = <&kp Z >;};


//		UPPERCASE LETTERS
		combo_upper_A		{timeout-ms = <500>;	key-positions = <4 8>;			bindings = <&kp LS(A) >;};
		combo_upper_B		{timeout-ms = <500>;	key-positions = <0 1 8>;		bindings = <&kp LS(B) >;};
		combo_upper_C		{timeout-ms = <500>;	key-positions = <5 7 8>;		bindings = <&kp LS(C) >;};
		combo_upper_D		{timeout-ms = <500>;	key-positions = <4 7 8>;		bindings = <&kp LS(D) >;};
		combo_upper_E		{timeout-ms = <500>;	key-positions = <7 8>;			bindings = <&kp LS(E) >;};
		combo_upper_F		{timeout-ms = <500>;	key-positions = <1 3 8>;		bindings = <&kp LS(F) >;};
		combo_upper_G		{timeout-ms = <500>;	key-positions = <0 3 8>;		bindings = <&kp LS(G) >;};
		combo_upper_H		{timeout-ms = <500>;	key-positions = <6 7 8>;		bindings = <&kp LS(H) >;};
		combo_upper_I		{timeout-ms = <500>;	key-positions = <3 8>;			bindings = <&kp LS(I) >;};
		combo_upper_J		{timeout-ms = <500>;	key-positions = <2 4 8>;		bindings = <&kp LS(J) >;};
		combo_upper_K		{timeout-ms = <500>;	key-positions = <3 5 8>;		bindings = <&kp LS(K) >;};
		combo_upper_L		{timeout-ms = <500>;	key-positions = <4 5 8>;		bindings = <&kp LS(L) >;};
		combo_upper_M		{timeout-ms = <500>;	key-positions = <0 7 8>;		bindings = <&kp LS(M) >;};
		combo_upper_N		{timeout-ms = <500>;	key-positions = <2 8>;			bindings = <&kp LS(N) >;};
		combo_upper_O		{timeout-ms = <500>;	key-positions = <5 8>;			bindings = <&kp LS(O) >;};
		combo_upper_P		{timeout-ms = <500>;	key-positions = <1 2 8>;		bindings = <&kp LS(P) >;};
		combo_upper_Qu		{timeout-ms = <500>;	key-positions = <4 6 8>;		bindings = <&m_upper_Qu >;};		//	Macro
		combo_upper_R		{timeout-ms = <500>;	key-positions = <0 8>;			bindings = <&kp LS(R) >;};
		combo_upper_S		{timeout-ms = <500>;	key-positions = <1 8>;			bindings = <&kp LS(S) >;};
		combo_upper_T		{timeout-ms = <500>;	key-positions = <6 8>;			bindings = <&kp LS(T) >;};
		combo_upper_U		{timeout-ms = <500>;	key-positions = <5 6 8>;		bindings = <&kp LS(U) >;};
		combo_upper_V		{timeout-ms = <500>;	key-positions = <1 7 8>;		bindings = <&kp LS(V) >;};
		combo_upper_W		{timeout-ms = <500>;	key-positions = <3 4 8>;		bindings = <&kp LS(W) >;};
		combo_upper_X		{timeout-ms = <500>;	key-positions = <0 6 8>;		bindings = <&kp LS(X) >;};
		combo_upper_Y		{timeout-ms = <500>;	key-positions = <2 3 8>;		bindings = <&kp LS(Y) >;};
		combo_upper_Z		{timeout-ms = <500>;	key-positions = <0 2 8>;		bindings = <&kp LS(Z) >;};

//		PUNCTUATION
		combo_QUESTION		{timeout-ms = <500>;	key-positions = <0 5>;			bindings = <&kp QUESTION >;};						//	?
		combo_EXCLAMATION	{timeout-ms = <500>;	key-positions = <0 5 8>;		bindings = <&kp EXCLAMATION >;};					//	!
		combo_DOT			{timeout-ms = <500>;	key-positions = <3 6>;			bindings = <&kp DOT >;};							//	.
		combo_COMMA			{timeout-ms = <500>;	key-positions = <2 7>;			bindings = <&kp COMMA >;};							//	,
		combo_COLON			{timeout-ms = <500>;	key-positions = <3 6 8>;		bindings = <&kp COLON >;};							//	:
		combo_SEMICOLON		{timeout-ms = <500>;	key-positions = <2 7 8>;		bindings = <&kp SEMICOLON >;};						//	;
		combo_APOSTROPHE	{timeout-ms = <500>;	key-positions = <1 4>;			bindings = <&kp APOSTROPHE >;};						//	'
		combo_DOUBLE_QUOTES	{timeout-ms = <500>;	key-positions = <1 4 8>;		bindings = <&kp DOUBLE_QUOTES >;};					//	"
		combo_ELIPSIS		{timeout-ms = <500>;	key-positions = <3 6 9>;		bindings = <&m_elipsis >;};							//	Macro …
		combo_GRAVE			{timeout-ms = <500>;	key-positions = <1 4 9>;		bindings = <&kp GRAVE >;};							//	`
		combo_DEGREE		{timeout-ms = <500>;	key-positions = <2 7 9>;		bindings = <&m_degree >;};							//	Macro °

//		SYMBOLS
		combo_SLASH			{timeout-ms = <500>;	key-positions = <1 6 8>;		bindings = <&kp SLASH >;};							//	/
		combo_BACKSLASH		{timeout-ms = <500>;	key-positions = <1 6>;			bindings = <&kp BACKSLASH >;};						//	\'
		combo_PIPE			{timeout-ms = <500>;	key-positions = <1 6 9>;		bindings = <&kp PIPE >;};							//	|
		combo_LEFT_BRACKET	{timeout-ms = <500>;	key-positions = <0 1 9>;		bindings = <&kp LEFT_BRACKET >;};					//	[
		combo_RIGHT_BRACKET	{timeout-ms = <500>;	key-positions = <2 3 9>;		bindings = <&kp RIGHT_BRACKET >;};					//	]
		combo_LPAR			{timeout-ms = <500>;	key-positions = <4 5 9>;		bindings = <&kp LEFT_PARENTHESIS >;};				//	(
		combo_RPAR			{timeout-ms = <500>;	key-positions = <6 7 9>;		bindings = <&kp RIGHT_PARENTHESIS >;};				//	)
		combo_LEFT_BRACE	{timeout-ms = <500>;	key-positions = <0 2 9>;		bindings = <&kp LEFT_BRACE >;};						//	{
		combo_RIGHT_BRACE	{timeout-ms = <500>;	key-positions = <1 3 9>;		bindings = <&kp RIGHT_BRACE >;};					//	}
		combo_LESS_THAN		{timeout-ms = <500>;	key-positions = <4 6 9>;		bindings = <&kp LESS_THAN >;};						//	<
		combo_GREATER_THAN	{timeout-ms = <500>;	key-positions = <5 7 9>;		bindings = <&kp GREATER_THAN >;};					//	>
		combo_CARET			{timeout-ms = <500>;	key-positions = <0 6 9>;		bindings = <&kp CARET >;};							//	^
		combo_TILDE			{timeout-ms = <500>;	key-positions = <2 5 9>;		bindings = <&kp TILDE >;};							//	~
		combo_HASH			{timeout-ms = <500>;	key-positions = <4 7 9>;		bindings = <&kp HASH >;};							//	#
		combo_DOLLAR		{timeout-ms = <500>;	key-positions = <0 7 9>;		bindings = <&kp DOLLAR >;};							//	$
		combo_PERCENT		{timeout-ms = <500>;	key-positions = <0 5 9>;		bindings = <&kp PERCENT >;};						//	%
		combo_ASTERISK		{timeout-ms = <500>;	key-positions = <1 7 9>;		bindings = <&kp ASTERISK >;};						//	*
		combo_PLUS			{timeout-ms = <500>;	key-positions = <3 5 9>;		bindings = <&kp PLUS >;};							//	+
		combo_EQUAL			{timeout-ms = <500>;	key-positions = <2 4 9>;		bindings = <&kp EQUAL >;};							//	=
		combo_MINUS			{timeout-ms = <500>;	key-positions = <2 5>;			bindings = <&kp MINUS >;};							//	-
		combo_AMPERSAND		{timeout-ms = <500>;	key-positions = <3 4 9>;		bindings = <&kp AMPERSAND >;};						//	&
		combo_AT			{timeout-ms = <500>;	key-positions = <0 3 9>;		bindings = <&kp AT >;};								//	@
		combo_UNDERSCORE	{timeout-ms = <500>;	key-positions = <2 5 8>;		bindings = <&kp UNDERSCORE >;};						//	_
		combo_TextIndent	{timeout-ms = <500>;	key-positions = <2 5 9 8>;		bindings = <&m_textIndent>;};						//	Macro " - "



//		NUMBERS
		combo_1				{timeout-ms = <500>;	key-positions = <0 9>;			bindings = <&kp NUMBER_1 >;};
		combo_2				{timeout-ms = <500>;	key-positions = <1 9>;			bindings = <&kp NUMBER_2 >;};
		combo_3				{timeout-ms = <500>;	key-positions = <2 9>;			bindings = <&kp NUMBER_3 >;};
		combo_4				{timeout-ms = <500>;	key-positions = <3 9>;			bindings = <&kp NUMBER_4 >;};
		combo_5				{timeout-ms = <500>;	key-positions = <4 9>;			bindings = <&kp NUMBER_5 >;};
		combo_6				{timeout-ms = <500>;	key-positions = <5 9>;			bindings = <&kp NUMBER_6 >;};
		combo_7				{timeout-ms = <500>;	key-positions = <6 9>;			bindings = <&kp NUMBER_7 >;};
		combo_8				{timeout-ms = <500>;	key-positions = <7 9>;			bindings = <&kp NUMBER_8 >;};
		combo_9				{timeout-ms = <500>;	key-positions = <1 2 9>;		bindings = <&kp NUMBER_9 >;};
		combo_0				{timeout-ms = <500>;	key-positions = <5 6 9>;		bindings = <&kp NUMBER_0 >;};

//		FUNCTION KEYS
		combo_F1			{timeout-ms = <500>;	key-positions = <0 9 8>;		bindings = <&kp F1>;};		//	
		combo_F2			{timeout-ms = <500>;	key-positions = <1 9 8>;		bindings = <&kp F2>;};		//	
		combo_F3			{timeout-ms = <500>;	key-positions = <2 9 8>;		bindings = <&kp F3>;};		//	
		combo_F4			{timeout-ms = <500>;	key-positions = <3 9 8>;		bindings = <&kp F4>;};		//	
		combo_F5			{timeout-ms = <500>;	key-positions = <4 9 8>;		bindings = <&kp F5>;};		//	
		combo_F6			{timeout-ms = <500>;	key-positions = <5 9 8>;		bindings = <&kp F6>;};		//	
		combo_F7			{timeout-ms = <500>;	key-positions = <6 9 8>;		bindings = <&kp F7>;};		//	
		combo_F8			{timeout-ms = <500>;	key-positions = <7 9 8>;		bindings = <&kp F8>;};		//	
		combo_F9			{timeout-ms = <500>;	key-positions = <1 2 9 8>;		bindings = <&kp F9>;};		//	
		combo_F10			{timeout-ms = <500>;	key-positions = <5 6 9 8>;		bindings = <&kp F10>;};		//	
		combo_F11			{timeout-ms = <500>;	key-positions = <0 1 9 8>;		bindings = <&kp F11>;};		//	
		combo_F12			{timeout-ms = <500>;	key-positions = <2 3 9 8>;		bindings = <&kp F12>;};		//	

//		NAVIGATION
		combo_PAGE_UP		{timeout-ms = <500>;	key-positions = <0 1 2 9>;		bindings = <&kp PAGE_UP >;};
		combo_PAGE_DOWN		{timeout-ms = <500>;	key-positions = <4 5 6 9>;		bindings = <&kp PAGE_DOWN >;};
		combo_HOME			{timeout-ms = <500>;	key-positions = <1 5 8>;		bindings = <&kp HOME >;};
		combo_END			{timeout-ms = <500>;	key-positions = <1 5 9>;		bindings = <&kp END >;};

//		CONTROL AND WHITESPACES
		combo_ENTER			{timeout-ms = <500>;	key-positions = <5 6 7>;		bindings = <&kp ENTER >;};
		combo_TAB			{timeout-ms = <500>;	key-positions = <4 5 6>;		bindings = <&kp TAB >;};
		combo_BACKSPACE		{timeout-ms = <500>;	key-positions = <1 2 3>;		bindings = <&kp BACKSPACE >;};
		combo_DELETE		{timeout-ms = <500>;	key-positions = <0 1 2>;		bindings = <&kp DELETE >;};
		combo_ESCAPE		{timeout-ms = <500>;	key-positions = <8 8>;			bindings = <&kp ESCAPE >;};
		
//		MODIFIERS
		combo_LCTRL			{timeout-ms = <500>;	key-positions = <0 4>;			bindings = <&kp LEFT_CONTROL >;};
		combo_LSHFT			{timeout-ms = <500>;	key-positions = <1 5>;			bindings = <&kp LEFT_SHIFT >;};
		combo_LALT			{timeout-ms = <500>;	key-positions = <3 7>;			bindings = <&kp LEFT_ALT >;};
		combo_LGUI			{timeout-ms = <500>;	key-positions = <2 6>;			bindings = <&kp LEFT_WIN >;};		
		combo_CTRLSHFT		{timeout-ms = <500>;	key-positions = <0 1 4 5>;		bindings = <&kp LC(LEFT_SHIFT) >;};
		combo_CAPS			{timeout-ms = <500>;	key-positions = <1 5 8>;		bindings = <&kp CAPS>;};		



//		NEAT SHORTCUTS
		combo_CTRLDELETE	{timeout-ms = <500>;	key-positions = <0 1 2 8>;		bindings = <&kp LC(DELETE) >;};			//  Delete the Next word
		combo_CTRLBACKSPACE	{timeout-ms = <500>;	key-positions = <1 2 3 8>;		bindings = <&kp LC(BACKSPACE)>;};		//  Delete the previous word
		combo_SHIFTTAB		{timeout-ms = <500>;	key-positions = <4 5 6 8>;		bindings = <&kp LS(TAB) >;};			//  Shift tab - previous tab space
		combo_CTRLALTDEL	{timeout-ms = <500>;	key-positions = <0 1 2 9 8>;	bindings = <&kp LC(LA(DELETE)) >;};		//	Control Alt Delete
		combo_CTRL_F4		{timeout-ms = <500>;	key-positions = <0 4 9 8>;		bindings = <&kp LC(F4) >;};				//	Close tab
		combo_ALT_F4		{timeout-ms = <500>;	key-positions = <3 7 9 8>;		bindings = <&kp LA(F4) >;};				//	Close program
		combo_UNDO			{timeout-ms = <500>;	key-positions = <0 1 2 4 5 6>;	bindings = <&kp LC(Z)>;};				//	Undo
		combo_REDO			{timeout-ms = <500>;	key-positions = <1 2 3 5 6 7>;	bindings = <&kp LC(Y)>;};				//	Redo
		combo_COPY			{timeout-ms = <500>;	key-positions = <0 2 4>;		bindings = <&kp LC(C)>;};				//	"
		combo_CUT			{timeout-ms = <500>;	key-positions = <0 1 4>;		bindings = <&kp LC(X)>;};		//	"
		combo_PASTE			{timeout-ms = <500>;	key-positions = <0 3 4>;		bindings = <&kp LC(V)>;};		//	"



		combo_BOLD			{timeout-ms = <500>;	key-positions = <0 1 4 8>;		bindings = <&kp LC(B)>;};				//	"
		combo_ITALIC		{timeout-ms = <500>;	key-positions = <0 3 4 8>;		bindings = <&kp LC(I)>;};				//	"
		combo_UNDERLINE		{timeout-ms = <500>;	key-positions = <0 2 4 8>;		bindings = <&kp LC(U)>;};				//	"

//		COMPUTER POWER
//		combo_reset			{timeout-ms = <500>;	key-positions = <0 1 2 3 9>;	bindings = <&c_RESET>;};		//	"	527	0 1 2 3 8	
		combo_lock			{timeout-ms = <500>;	key-positions = <0 1 2 3 8>;	bindings = <&kp LG(L) >;};		//	"	783	0 1 2 3 9 8	
//		combo_shutdown		{timeout-ms = <500>;	key-positions = <0 1 2 3 9 8>;	bindings = <&C_POWER>;};		//	"
						

//		RANDOM USEFUL MACROS
		combo_MACRO1		{timeout-ms = <500>;	key-positions = <0 1 2 3 4 5 6 7>;		bindings = <&kp C >;};		//	
		combo_MACRO2		{timeout-ms = <500>;	key-positions = <0 1 2 3>;				bindings = <&kp V >;};		//	


//		LAYERS
		combo_L0			{timeout-ms = <500>;	key-positions = <2 3 6 7>;		bindings = <&kp NUMBER_0>;};		//	NO THUMB - 
		combo_L1			{timeout-ms = <500>;	key-positions = <2 3 6 7 8>;	bindings = <&kp NUMBER_1>;};		//	
		combo_L2			{timeout-ms = <500>;	key-positions = <2 3 6 7 9>;	bindings = <&kp NUMBER_2>;};		//	
		combo_L3			{timeout-ms = <500>;	key-positions = <2 3 6 7 9 8>;	bindings = <&kp NUMBER_3>;};		//	
		combo_L4			{timeout-ms = <500>;	key-positions = <1 3 5 7>;		bindings = <&kp NUMBER_4>;};		//  NO THUMB - 
		combo_L5			{timeout-ms = <500>;	key-positions = <1 3 5 7 8>;	bindings = <&kp NUMBER_5>;};		//	
		combo_L6			{timeout-ms = <500>;	key-positions = <1 3 5 7 9>;	bindings = <&kp NUMBER_6>;};		//	
		combo_L7			{timeout-ms = <500>;	key-positions = <1 3 5 7 9 8>;	bindings = <&kp NUMBER_7>;};		//	
		combo_L8			{timeout-ms = <500>;	key-positions = <0 3 4 7>;		bindings = <&kp NUMBER_8>;};		//  NO THUMB - 
		combo_L9			{timeout-ms = <500>;	key-positions = <0 3 4 7 8>;	bindings = <&kp NUMBER_9>;};		//	
		combo_L10			{timeout-ms = <500>;	key-positions = <0 3 4 7 9>;	bindings = <&kp NUMBER_0>;};		//	
		combo_L11			{timeout-ms = <500>;	key-positions = <0 3 4 7 9 8>;	bindings = <&kp NUMBER_0>;};		//	

//		KEYBOARD CONTROL
		combo_BT1			{timeout-ms = <500>;	key-positions = <0 1 2 3 4 5 6 7 11>;	bindings = <&bt BT_SEL 0>;};		//	
		combo_BT2			{timeout-ms = <500>;	key-positions = <0 1 2 3 4 5 6 7 12>;	bindings = <&bt BT_SEL 2>;};		//	
		combo_BT3			{timeout-ms = <500>;	key-positions = <0 1 2 3 4 5 6 7 13>;	bindings = <&bt BT_SEL 3>;};		//	
		combo_BT4			{timeout-ms = <500>;	key-positions = <0 1 2 3 4 5 6 7 14>;	bindings = <&bt BT_SEL 4>;};		//	
		combo_BT5			{timeout-ms = <500>;	key-positions = <0 1 2 3 4 5 6 7 10>;	bindings = <&bt BT_SEL 5>;};		//	
		combo_ResetKB		{timeout-ms = <500>;	key-positions = <0 1 2 3 4 5 6 7 9 8>;	bindings = <&bootloader >;};		//	
		combo_BT			{timeout-ms = <500>;	key-positions = <0 1 2 3 4 5 6 7 8>;	bindings = <&out OUT_BLE >;};		//	
		combo_USB			{timeout-ms = <500>;	key-positions = <0 1 2 3 4 5 6 7 9>;	bindings = <&out OUT_USB >;};		//	
		combo_BT_CLEAR		{timeout-ms = <500>;	key-positions = <0 1 2 10>;				bindings = <&bt BT_CLR>;};		//	



//		WORD PARTS
		combo_able			{timeout-ms = <500>;	key-positions = <0 1 4 5 7>;	bindings = <&m_able >;};
		combo_about			{timeout-ms = <500>;	key-positions = <0 1 4 5 6>;	bindings = <&m_about >;};
		combo_ack			{timeout-ms = <500>;	key-positions = <3 4 5 7>;		bindings = <&m_ack >;};
		combo_aise			{timeout-ms = <500>;	key-positions = <1 3 4 7 8>;	bindings = <&m_aise >;};
		combo_ake			{timeout-ms = <500>;	key-positions = <3 4 5 7 8>;	bindings = <&m_ake >;};
		combo_al			{timeout-ms = <500>;	key-positions = <0 4 5 8>;		bindings = <&m_al >;};
		combo_all			{timeout-ms = <500>;	key-positions = <0 4 5>;		bindings = <&m_all >;};
		combo_ally			{timeout-ms = <500>;	key-positions = <2 3 4 5 9>;	bindings = <&m_ally >;};
		combo_also			{timeout-ms = <500>;	key-positions = <1 4 5 6 7>;	bindings = <&m_also >;};
		combo_and			{timeout-ms = <500>;	key-positions = <2 4 7>;		bindings = <&m_and >;};
		combo_ange			{timeout-ms = <500>;	key-positions = <0 2 3 4 7>;	bindings = <&m_ange >;};
		combo_are			{timeout-ms = <500>;	key-positions = <0 4 7>;		bindings = <&m_are >;};
		combo_ation			{timeout-ms = <500>;	key-positions = <2 3 4 5 6>;	bindings = <&m_ation >;};
		combo_ative			{timeout-ms = <500>;	key-positions = <1 3 4 6 7>;	bindings = <&m_ative >;};
		combo_ave			{timeout-ms = <500>;	key-positions = <1 4 7>;		bindings = <&m_ave >;};
		combo_be			{timeout-ms = <500>;	key-positions = <0 1 7 8>;		bindings = <&m_be >;};
		combo_because		{timeout-ms = <500>;	key-positions = <0 1 4 5 6 7>;	bindings = <&m_because >;};
		combo_ch			{timeout-ms = <500>;	key-positions = <5 6 7 8>;		bindings = <&m_ch >;};
		combo_day			{timeout-ms = <500>;	key-positions = <2 3 4 7>;		bindings = <&m_day >;};
		combo_dis			{timeout-ms = <500>;	key-positions = <1 3 4 7>;		bindings = <&m_dis >;};
		combo_each			{timeout-ms = <500>;	key-positions = <4 5 6 7>;		bindings = <&m_each >;};
		combo_eal			{timeout-ms = <500>;	key-positions = <4 5 7>;		bindings = <&m_eal >;};
		combo_ear			{timeout-ms = <500>;	key-positions = <0 4 7 8>;		bindings = <&m_ear >;};
		combo_een			{timeout-ms = <500>;	key-positions = <2 6 7 8>;		bindings = <&m_een >;};
		combo_eir			{timeout-ms = <500>;	key-positions = <0 3 7>;		bindings = <&m_eir >;};
		combo_ent			{timeout-ms = <500>;	key-positions = <2 6 7>;		bindings = <&m_ent >;};
		combo_ere			{timeout-ms = <500>;	key-positions = <0 6 7 8>;		bindings = <&m_ere >;};
		combo_ess			{timeout-ms = <500>;	key-positions = <1 2 7>;		bindings = <&m_ess >;};
		combo_ever			{timeout-ms = <500>;	key-positions = <0 1 7>;		bindings = <&m_ever >;};
		combo_every			{timeout-ms = <500>;	key-positions = <0 1 2 3 7>;	bindings = <&m_every >;};
		combo_for			{timeout-ms = <500>;	key-positions = <0 1 3 5>;		bindings = <&m_for >;};
		combo_from			{timeout-ms = <500>;	key-positions = <0 1 3 5 7>;	bindings = <&m_from >;};
		combo_has			{timeout-ms = <500>;	key-positions = <1 4 6 7 8>;	bindings = <&m_has >;};
		combo_have			{timeout-ms = <500>;	key-positions = <1 4 6 7>;		bindings = <&m_have >;};
		combo_ible			{timeout-ms = <500>;	key-positions = <0 1 4 5 7 8>;	bindings = <&m_ible >;};
		combo_ice			{timeout-ms = <500>;	key-positions = <3 5 7>;		bindings = <&m_ice >;};
		combo_ich			{timeout-ms = <500>;	key-positions = <0 3 4 5 6 7>;	bindings = <&m_ich >;};
		combo_ies			{timeout-ms = <500>;	key-positions = <1 3 7 8>;		bindings = <&m_ies >;};
		combo_igh			{timeout-ms = <500>;	key-positions = <0 3 6 7>;		bindings = <&m_igh >;};
		combo_ight			{timeout-ms = <500>;	key-positions = <0 3 6 7 8>;	bindings = <&m_ight >;};
		combo_ind			{timeout-ms = <500>;	key-positions = <2 3 4 7 8>;	bindings = <&m_ind >;};
		combo_ine			{timeout-ms = <500>;	key-positions = <3 6 7>;		bindings = <&m_ine >;};
		combo_ing			{timeout-ms = <500>;	key-positions = <0 2 3>;		bindings = <&m_ing >;};
		combo_ion			{timeout-ms = <500>;	key-positions = <2 3 5>;		bindings = <&m_ion >;};
		combo_ious			{timeout-ms = <500>;	key-positions = <0 1 5 6>;		bindings = <&m_ious >;};
		combo_irst			{timeout-ms = <500>;	key-positions = <0 1 3 6>;		bindings = <&m_irst >;};
		combo_ise			{timeout-ms = <500>;	key-positions = <1 3 7>;		bindings = <&m_ise >;};
		combo_ism			{timeout-ms = <500>;	key-positions = <0 2 7>;		bindings = <&m_ism >;};
		combo_ist			{timeout-ms = <500>;	key-positions = <1 3 6>;		bindings = <&m_ist >;};
		combo_ive			{timeout-ms = <500>;	key-positions = <1 3 7 9>;		bindings = <&m_ive >;};
		combo_ld			{timeout-ms = <500>;	key-positions = <4 5 7 8>;		bindings = <&m_ld >;};
		combo_less			{timeout-ms = <500>;	key-positions = <1 2 7 9>;		bindings = <&m_less >;};
		combo_lly			{timeout-ms = <500>;	key-positions = <2 3 4 5 8>;	bindings = <&m_lly >;};
		combo_ly			{timeout-ms = <500>;	key-positions = <2 3 4 5>;		bindings = <&m_ly >;};
		combo_ment			{timeout-ms = <500>;	key-positions = <0 2 6 7>;		bindings = <&m_ment >;};
		combo_ness			{timeout-ms = <500>;	key-positions = <1 2 7 8>;		bindings = <&m_ness >;};
		combo_obvious		{timeout-ms = <500>;	key-positions = <0 1 3 5 6 7>;	bindings = <&m_obvious >;};
		combo_ock			{timeout-ms = <500>;	key-positions = <3 5 7 8>;		bindings = <&m_ock >;};
		combo_oint			{timeout-ms = <500>;	key-positions = <2 3 5 6 8>;	bindings = <&m_oint >;};
		combo_ome			{timeout-ms = <500>;	key-positions = <0 5 7>;		bindings = <&m_ome >;};
		combo_one			{timeout-ms = <500>;	key-positions = <2 5 7>;		bindings = <&m_one >;};
		combo_ook			{timeout-ms = <500>;	key-positions = <1 3 5>;		bindings = <&m_ook >;};
		combo_ore			{timeout-ms = <500>;	key-positions = <0 5 7 8>;		bindings = <&m_ore >;};
		combo_ose			{timeout-ms = <500>;	key-positions = <1 5 7>;		bindings = <&m_ose >;};
		combo_other			{timeout-ms = <500>;	key-positions = <0 5 6 7>;		bindings = <&m_other >;};
		combo_ough			{timeout-ms = <500>;	key-positions = <0 3 5 6 7>;	bindings = <&m_ough >;};
		combo_ought			{timeout-ms = <500>;	key-positions = <0 3 5 6 7 8>;	bindings = <&m_ought >;};
		combo_ould			{timeout-ms = <500>;	key-positions = <4 5 6 7 8>;	bindings = <&m_ould >;};
		combo_our			{timeout-ms = <500>;	key-positions = <0 5 6>;		bindings = <&m_our >;};
		combo_ous			{timeout-ms = <500>;	key-positions = <1 5 6>;		bindings = <&m_ous >;};
		combo_ouse			{timeout-ms = <500>;	key-positions = <1 5 6 7>;		bindings = <&m_ouse >;};
		combo_out			{timeout-ms = <500>;	key-positions = <2 5 6>;		bindings = <&m_out >;};
		combo_pra			{timeout-ms = <500>;	key-positions = <0 1 2 4>;		bindings = <&m_pra >;};
		combo_pre			{timeout-ms = <500>;	key-positions = <0 1 2 7>;		bindings = <&m_pre >;};
		combo_pro			{timeout-ms = <500>;	key-positions = <0 1 2 5>;		bindings = <&m_pro >;};
		combo_psy			{timeout-ms = <500>;	key-positions = <1 2 3 6>;		bindings = <&m_psy >;};
		combo_psych			{timeout-ms = <500>;	key-positions = <1 2 3 6 8>;	bindings = <&m_psych >;};
		combo_rst			{timeout-ms = <500>;	key-positions = <0 1 6>;		bindings = <&m_rst >;};
		combo_sh			{timeout-ms = <500>;	key-positions = <1 6 7>;		bindings = <&m_sh >;};
		combo_sm			{timeout-ms = <500>;	key-positions = <0 1 7 9>;		bindings = <&m_sm >;};
		combo_than			{timeout-ms = <500>;	key-positions = <2 4 6 7>;		bindings = <&m_than >;};
		combo_that			{timeout-ms = <500>;	key-positions = <4 6 7>;		bindings = <&m_that >;};
		combo_then			{timeout-ms = <500>;	key-positions = <2 4 6 7 8>;	bindings = <&m_then >;};
		combo_there			{timeout-ms = <500>;	key-positions = <0 6 7>;		bindings = <&m_there >;};
		combo_these			{timeout-ms = <500>;	key-positions = <1 6 7 8>;		bindings = <&m_these >;};
		combo_thin			{timeout-ms = <500>;	key-positions = <2 6 7 9>;		bindings = <&m_thin >;};
		combo_this			{timeout-ms = <500>;	key-positions = <1 3 6 7>;		bindings = <&m_this >;};
		combo_thr			{timeout-ms = <500>;	key-positions = <0 6 7 9>;		bindings = <&m_thr >;};
		combo_tion			{timeout-ms = <500>;	key-positions = <2 3 5 6>;		bindings = <&m_tion >;};
		combo_tive			{timeout-ms = <500>;	key-positions = <1 3 6 7 8>;	bindings = <&m_tive >;};
		combo_ttle			{timeout-ms = <500>;	key-positions = <4 5 6 7 9>;	bindings = <&m_ttle >;};
		combo_uch			{timeout-ms = <500>;	key-positions = <5 6 7 9>;		bindings = <&m_uch >;};
		combo_uous			{timeout-ms = <500>;	key-positions = <1 5 6 8>;		bindings = <&m_uous >;};
		combo_was			{timeout-ms = <500>;	key-positions = <1 3 4>;		bindings = <&m_was >;};
		combo_we			{timeout-ms = <500>;	key-positions = <3 4 7>;		bindings = <&m_we >;};
		combo_wh			{timeout-ms = <500>;	key-positions = <3 4 7 8>;		bindings = <&m_wh >;};
		combo_what			{timeout-ms = <500>;	key-positions = <3 4 6 7 8>;	bindings = <&m_what >;};
		combo_when			{timeout-ms = <500>;	key-positions = <2 3 4 6 7>;	bindings = <&m_when >;};
		combo_with			{timeout-ms = <500>;	key-positions = <3 4 6 7>;		bindings = <&m_with >;};
		combo_your			{timeout-ms = <500>;	key-positions = <0 5 6 8>;		bindings = <&m_your >;};

		};

	
	keymap {
		compatible = "zmk,keymap";
		tapping-term-ms = <20>;
		default_layer {
			bindings = <
				&kp R	&kp S	&kp N	&kp I
				&kp A	&kp O	&kp T	&kp E 
												&kp SPACE	&kp LC(BACKSPACE)	
												
												&kp UP
									&kp LEFT	&kp C		&kp RIGHT
												&kp DOWN
				>;
			sensor-bindings = <&inc_dec_kp LEFT_ARROW RIGHT_ARROW>;
			};
		};
};
